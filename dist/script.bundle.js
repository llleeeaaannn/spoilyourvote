(()=>{"use strict";var t=[,(t,n,e)=>{e.r(n),e.d(n,{default:()=>C});var i=e(2),o=e.n(i),s=e(3),r=e.n(s),l=e(4),a=e.n(l),c=e(5),f=e.n(c),A=e(6),h=e.n(A),d=e(7),u=e.n(d),m=e(8),p={};p.styleTagTransform=u(),p.setAttributes=f(),p.insert=a().bind(null,"head"),p.domAPI=r(),p.insertStyleElement=h();o()(m.default,p);const C=m.default&&m.default.locals?m.default.locals:void 0},t=>{var n=[];function e(t){for(var e=-1,i=0;i<n.length;i++)if(n[i].identifier===t){e=i;break}return e}function i(t,i){for(var s={},r=[],l=0;l<t.length;l++){var a=t[l],c=i.base?a[0]+i.base:a[0],f=s[c]||0,A="".concat(c," ").concat(f);s[c]=f+1;var h=e(A),d={css:a[1],media:a[2],sourceMap:a[3],supports:a[4],layer:a[5]};if(-1!==h)n[h].references++,n[h].updater(d);else{var u=o(d,i);i.byIndex=l,n.splice(l,0,{identifier:A,updater:u,references:1})}r.push(A)}return r}function o(t,n){var e=n.domAPI(n);e.update(t);return function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,o){var s=i(t=t||[],o=o||{});return function(t){t=t||[];for(var r=0;r<s.length;r++){var l=e(s[r]);n[l].references--}for(var a=i(t,o),c=0;c<s.length;c++){var f=e(s[c]);0===n[f].references&&(n[f].updater(),n.splice(f,1))}s=a}}},t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var i="";e.supports&&(i+="@supports (".concat(e.supports,") {")),e.media&&(i+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(i+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),i+=e.css,o&&(i+="}"),e.media&&(i+="}"),e.supports&&(i+="}");var s=e.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),n.styleTagTransform(i,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},t=>{var n={};t.exports=function(t,e){var i=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(e)}},(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}},(t,n,e)=>{e.r(n),e.d(n,{default:()=>c});var i=e(9),o=e.n(i),s=e(10),r=e.n(s),l=e(11),a=r()(o());a.i(l.default),a.push([t.id,"/* Import CSS (this should all be added to same file in production) */\n\n/* CSS Reset */\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* Root Variables */\n:root {\n  --yellow1: rgba(255, 255, 0, 1);\n  --blue1: rgba(0, 0, 255, 1);\n}\n\n/* General Styling */\n* {\n\tbox-sizing: border-box;\n  font-family: 'GT Ultra Standard', sans-serif;\n\tcolor: var(--yellow1)\n}\n\nhtml {\n  background-color: var(--blue1);\n}\n\nbody {\n  background-color: var(--blue1);\n}\n\n.disable-transitions-onload {\n  transition: none !important;\n}\n\n/* Main Page Styling */\n#main-container {\n\tposition: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 400rem;\n\t/* Margin for wave */\n\tmargin-bottom: 7rem;\n}\n\n/* Home Container */\n#home-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 95vh;\n\t/* border: 1px solid red; */\n}\n\n#home-container h1 {\n\tpadding: 0rem 3rem;\n  font-family: 'GT Ultra Median', sans-serif;\n\ttext-align: center;\n  font-size: 8rem;\n\t/* border: 1px solid green; */\n}\n\n#home-container h3 {\n\tpadding: 0rem 3rem;\n\tmargin-top: 0.5rem;\n\tcolor: white;\n  font-size: 2rem;\n\ttext-align: center;\n\tline-height: 2.25rem; /* Font size + space between each line */\n\tfont-family: 'GT Light Median', sans-serif;\n\t/* border: 1px solid black; */\n}\n\n/* Scroll Container */\n#scroll-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 25vh;\n}\n\n#scroll-container span {\n  font-family: 'GT Light Median', sans-serif;\n  font-size: 1rem;\n  color: white;\n\tcolor: var(--yellow1);\n}\n\n.scroll-inner-container {\n\tdisplay: flex;\n\tflex-direction: row;\n\twidth: 100%;\n\theight: 21vh;\n}\n\n.scroll-inner-container > div {\n\twidth: 50%;\n}\n\n.scroll-inner-container :last-child {\n\tborder-left: 0.5px solid var(--yellow1);\n}\n\n/* Image Container */\n#stats-container {\n\tposition: relative;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\twidth: 85%;\n\theight: 200vh;\n\tmargin: 10vh 10vw;\n\tpadding: 3rem;\n\tborder: 1px solid red;\n}\n\n#stats-container > div {\n\talign-self: flex-start;\n\tmargin-left: 3rem;\n\tfont-size: 2rem;\n\tfont-family: 'GT Thin Median';\n}\n\n#stats-container > :nth-child(6) {\n\talign-self: flex-end;\n\tfont-size: 2rem;\n\tfont-family: 'GT Light Median';\n}\n\n#stats-container .turn {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tmargin-left: 0rem;\n\twriting-mode: vertical-lr;\n\ttransform: rotate(180deg);\n}\n\n.question {\n\tmargin-top: 0.75rem;\n}\n\n.question span {\n\tfont-size: 4rem;\n\tfont-family: 'GT Ultra Fine';\n}\n\n.answer {\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\tmargin-top: 0.75rem;\n}\n\n.answer span {\n\twhite-space: pre-wrap;\n}\n\n#stats-container i {\n\tfont-family: 'GT Thin Median Italic';\n\ttext-decoration: line-through;\n\ttext-decoration-thickness: 0.1rem;\n}\n\n#stats-container .quote {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-end;\n\talign-self: flex-end;\n\tmargin-top: 2rem;\n\tmargin-left: 20vw;\n\tfont-size: 2rem;\n\tfont-family: 'GT Light Median';\n}\n\n#stats-container .quote span {\n\ttext-align: right;\n}\n\n#stats-container .quote :first-child {\n\tmargin-bottom: 0.25rem;\n}\n\n/* Wave at bottom of main container */\n.bottom-wave {\n  position: absolute;\n  bottom: -1.5rem;\n  left: 0;\n  width: 100%;\n  overflow: hidden;\n  line-height: 0;\n}\n\n.bottom-wave svg {\n  position: relative;\n  display: block;\n  width: calc(139% + 1.3px);\n  height: 1.5rem;\n}\n\n.bottom-wave .wave-fill {\n  fill: var(--blue1);\n}\n\n/* Footer Styling */\n#footer-container {\n\tposition: fixed;\n\tbottom: 0;\n\tdisplay: grid;\n\tgrid-template-columns: repeat(3, 1fr);\n\twidth: 100%;\n\tpadding: 10rem 3rem 2.5rem 3rem;\n\tmargin-top: auto;\n\tbackground-color: var(--yellow1);\n\tz-index: -1;\n}\n\n#footer-container span {\n\tfont-size: 0.75rem;\n\tfont-family: 'GT Light Median';\n\ttext-transform: uppercase;\n\tcolor: var(--blue1);\n\tcursor: pointer;\n}\n\n.footer-left {\n\tjustify-self: start;\n}\n\n.footer-center {\n\tjustify-self: center;\n}\n\n.footer-right {\n\tjustify-self: end;\n}\n\n.footer-center span,\n.footer-right span {\n\tpadding-left: 0.25rem;\n\tpadding-right: 0.5rem;\n\tborder-right: 1px solid var(--blue1);\n}\n\n.footer-center :last-child ,\n.footer-right :last-child {\n\tpadding-right: 0;\n\tborder-right: none;\n}\n\n.footer-center :first-child ,\n.footer-right :first-child {\n\tpadding-left: 0;\n}\n\n/* Logo Styling */\n#logo-container {\n\tposition: fixed;\n  top: 2rem;\n  left: 2.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n\tz-index: 200;\n}\n\n#logo-container span {\n\tcolor: var(--yellow1);\n\tfont-size: 0.9rem;\n\tfont-family: 'GT Ultra Fine';\n\tanimation: 0.8s linear logo-blue-to-yellow;\n}\n\n#logo-container.show-menu span {\n\tcolor: var(--blue1);\n\tanimation: 0.3s linear logo-yellow-to-blue;\n}\n\n@keyframes logo-yellow-to-blue {\n  0% { color: var(--yellow1); }\n  100% { color: var(--blue1); }\n}\n\n@keyframes logo-blue-to-yellow {\n  0% { color: var(--blue1); }\n  100% { color: var(--yellow1); }\n}\n\n/* Menu Icon Styling */\n#menu-toggle {\n\tposition: fixed;\n  top: 2.25rem;\n  right: 2.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 1.9rem;\n  width: 1.9rem;\n\tcursor: pointer;\n\tz-index: 200;\n}\n\n#menu-toggle .menu-bar {\n  height: 0.2rem;\n  width: 100%;\n  background-color: var(--yellow1);\n  transition: all 800ms ease-in-out;\n}\n\n#menu-toggle .menu-selected {\n  transition: all 200ms ease-in-out;\n  background-color: var(--blue1);\n  transform-origin: top left;\n}\n\n#menu-toggle .menu-selected:nth-of-type(1) {\n  transition: all 500ms ease-in-out;\n  transform: rotate(45deg);\n  transform-origin: top left;\n  width: 2.45rem;\n}\n\n#menu-toggle .menu-selected:nth-of-type(2) {\n  transition: all 100ms ease-in-out;\n  transform-origin: center;\n  width: 0;\n}\n\n#menu-toggle .menu-selected:nth-of-type(3) {\n  transition: all 500ms ease-in-out;\n  transform: rotate(-45deg);\n  transform-origin: bottom left;\n  width: 2.45rem;\n}\n\n/* Menu Styling */\n#menu-container {\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: center;\n\talign-items: center;\n\tposition: absolute;\n\ttop: -100vh;\n\tleft: 0;\n\twidth: 100%;\n\theight: 100vh;\n\tbackground-color: var(--yellow1);\n\tz-index: 100;\n\ttransition: all 750ms ease-in-out;\n}\n\n#menu-container.show-menu {\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\ttransition: all 750ms ease-in-out;\n}\n\n/* Menu Media Styling */\n.media-links-container {\n\tposition: absolute;\n\ttop: 75vh;\n\tleft: 50vw;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n}\n\n.media-links-container div {\n\tposition: relative;\n\tmargin-bottom: 0.75rem;\n\tcursor: pointer;\n}\n\n.media-links-container div a {\n\tcolor: var(--blue1);\n\ttext-decoration: none;\n\ttext-transform: uppercase;\n\tletter-spacing: 0.15rem;\n\tfont-family: 'GT Light Median', sans-serif;\n}\n\n/* Media Links Underline Styling */\n.fade-underline {\n  position: relative;\n  text-decoration: none;\n  display: inline-block;\n}\n\n.fade-underline:after {\n  display: block;\n  content: '';\n  border-bottom: 1px solid var(--blue1);\n  transform: scaleX(0);\n  transition: transform 250ms ease-in-out;\n  transform-origin: 100% 50%\n}\n\n.fade-underline:hover:after {\n  transform: scaleX(1);\n  transform-origin: 0 50%;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA,qEAAqE;;AAGrE,cAAc;AACd;;;;;;;;;;;;;CAaC,SAAS;CACT,UAAU;CACV,SAAS;CACT,eAAe;CACf,aAAa;CACb,wBAAwB;AACzB;AACA;;CAEC,cAAc;AACf;AACA;CACC,cAAc;AACf;AACA;CACC,gBAAgB;AACjB;AACA;CACC,YAAY;AACb;AACA;;CAEC,WAAW;CACX,aAAa;AACd;AACA;CACC,yBAAyB;CACzB,iBAAiB;AAClB;;AAEA,mBAAmB;AACnB;EACE,+BAA+B;EAC/B,2BAA2B;AAC7B;;AAEA,oBAAoB;AACpB;CACC,sBAAsB;EACrB,4CAA4C;CAC7C;AACD;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,2BAA2B;AAC7B;;AAEA,sBAAsB;AACtB;CACC,kBAAkB;EACjB,aAAa;EACb,sBAAsB;EACtB,2BAA2B;EAC3B,mBAAmB;EACnB,WAAW;EACX,cAAc;CACf,oBAAoB;CACpB,mBAAmB;AACpB;;AAEA,mBAAmB;AACnB;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,mBAAmB;EACnB,WAAW;EACX,YAAY;CACb,2BAA2B;AAC5B;;AAEA;CACC,kBAAkB;EACjB,0CAA0C;CAC3C,kBAAkB;EACjB,eAAe;CAChB,6BAA6B;AAC9B;;AAEA;CACC,kBAAkB;CAClB,kBAAkB;CAClB,YAAY;EACX,eAAe;CAChB,kBAAkB;CAClB,oBAAoB,EAAE,wCAAwC;CAC9D,0CAA0C;CAC1C,6BAA6B;AAC9B;;AAEA,qBAAqB;AACrB;EACE,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,mBAAmB;EACnB,WAAW;EACX,YAAY;AACd;;AAEA;EACE,0CAA0C;EAC1C,eAAe;EACf,YAAY;CACb,qBAAqB;AACtB;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,WAAW;CACX,YAAY;AACb;;AAEA;CACC,UAAU;AACX;;AAEA;CACC,uCAAuC;AACxC;;AAEA,oBAAoB;AACpB;CACC,kBAAkB;CAClB,aAAa;CACb,sBAAsB;CACtB,mBAAmB;CACnB,UAAU;CACV,aAAa;CACb,iBAAiB;CACjB,aAAa;CACb,qBAAqB;AACtB;;AAEA;CACC,sBAAsB;CACtB,iBAAiB;CACjB,eAAe;CACf,6BAA6B;AAC9B;;AAEA;CACC,oBAAoB;CACpB,eAAe;CACf,8BAA8B;AAC/B;;AAEA;CACC,kBAAkB;CAClB,MAAM;CACN,OAAO;CACP,iBAAiB;CACjB,yBAAyB;CACzB,yBAAyB;AAC1B;;AAEA;CACC,mBAAmB;AACpB;;AAEA;CACC,eAAe;CACf,4BAA4B;AAC7B;;AAEA;CACC,aAAa;CACb,mBAAmB;CACnB,2BAA2B;CAC3B,mBAAmB;AACpB;;AAEA;CACC,qBAAqB;AACtB;;AAEA;CACC,oCAAoC;CACpC,6BAA6B;CAC7B,iCAAiC;AAClC;;AAEA;CACC,aAAa;CACb,sBAAsB;CACtB,qBAAqB;CACrB,oBAAoB;CACpB,gBAAgB;CAChB,iBAAiB;CACjB,eAAe;CACf,8BAA8B;AAC/B;;AAEA;CACC,iBAAiB;AAClB;;AAEA;CACC,sBAAsB;AACvB;;AAEA,qCAAqC;AACrC;EACE,kBAAkB;EAClB,eAAe;EACf,OAAO;EACP,WAAW;EACX,gBAAgB;EAChB,cAAc;AAChB;;AAEA;EACE,kBAAkB;EAClB,cAAc;EACd,yBAAyB;EACzB,cAAc;AAChB;;AAEA;EACE,kBAAkB;AACpB;;AAEA,mBAAmB;AACnB;CACC,eAAe;CACf,SAAS;CACT,aAAa;CACb,qCAAqC;CACrC,WAAW;CACX,+BAA+B;CAC/B,gBAAgB;CAChB,gCAAgC;CAChC,WAAW;AACZ;;AAEA;CACC,kBAAkB;CAClB,8BAA8B;CAC9B,yBAAyB;CACzB,mBAAmB;CACnB,eAAe;AAChB;;AAEA;CACC,mBAAmB;AACpB;;AAEA;CACC,oBAAoB;AACrB;;AAEA;CACC,iBAAiB;AAClB;;AAEA;;CAEC,qBAAqB;CACrB,qBAAqB;CACrB,oCAAoC;AACrC;;AAEA;;CAEC,gBAAgB;CAChB,kBAAkB;AACnB;;AAEA;;CAEC,eAAe;AAChB;;AAEA,iBAAiB;AACjB;CACC,eAAe;EACd,SAAS;EACT,YAAY;EACZ,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,uBAAuB;CACxB,YAAY;AACb;;AAEA;CACC,qBAAqB;CACrB,iBAAiB;CACjB,4BAA4B;CAC5B,0CAA0C;AAC3C;;AAEA;CACC,mBAAmB;CACnB,0CAA0C;AAC3C;;AAEA;EACE,KAAK,qBAAqB,EAAE;EAC5B,OAAO,mBAAmB,EAAE;AAC9B;;AAEA;EACE,KAAK,mBAAmB,EAAE;EAC1B,OAAO,qBAAqB,EAAE;AAChC;;AAEA,sBAAsB;AACtB;CACC,eAAe;EACd,YAAY;EACZ,aAAa;EACb,aAAa;EACb,sBAAsB;EACtB,8BAA8B;EAC9B,cAAc;EACd,aAAa;CACd,eAAe;CACf,YAAY;AACb;;AAEA;EACE,cAAc;EACd,WAAW;EACX,gCAAgC;EAChC,iCAAiC;AACnC;;AAEA;EACE,iCAAiC;EACjC,8BAA8B;EAC9B,0BAA0B;AAC5B;;AAEA;EACE,iCAAiC;EACjC,wBAAwB;EACxB,0BAA0B;EAC1B,cAAc;AAChB;;AAEA;EACE,iCAAiC;EACjC,wBAAwB;EACxB,QAAQ;AACV;;AAEA;EACE,iCAAiC;EACjC,yBAAyB;EACzB,6BAA6B;EAC7B,cAAc;AAChB;;AAEA,iBAAiB;AACjB;CACC,aAAa;CACb,mBAAmB;CACnB,uBAAuB;CACvB,mBAAmB;CACnB,kBAAkB;CAClB,WAAW;CACX,OAAO;CACP,WAAW;CACX,aAAa;CACb,gCAAgC;CAChC,YAAY;CACZ,iCAAiC;AAClC;;AAEA;CACC,eAAe;CACf,MAAM;CACN,OAAO;CACP,iCAAiC;AAClC;;AAEA,uBAAuB;AACvB;CACC,kBAAkB;CAClB,SAAS;CACT,UAAU;CACV,aAAa;CACb,sBAAsB;CACtB,uBAAuB;AACxB;;AAEA;CACC,kBAAkB;CAClB,sBAAsB;CACtB,eAAe;AAChB;;AAEA;CACC,mBAAmB;CACnB,qBAAqB;CACrB,yBAAyB;CACzB,uBAAuB;CACvB,0CAA0C;AAC3C;;AAEA,kCAAkC;AAClC;EACE,kBAAkB;EAClB,qBAAqB;EACrB,qBAAqB;AACvB;;AAEA;EACE,cAAc;EACd,WAAW;EACX,qCAAqC;EACrC,oBAAoB;EACpB,uCAAuC;EACvC;AACF;;AAEA;EACE,oBAAoB;EACpB,uBAAuB;AACzB",sourcesContent:["/* Import CSS (this should all be added to same file in production) */\n@import url('./fonts.css');\n\n/* CSS Reset */\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed,\nfigure, figcaption, footer, header, hgroup,\nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\narticle, aside, details, figcaption, figure,\nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n\n/* Root Variables */\n:root {\n  --yellow1: rgba(255, 255, 0, 1);\n  --blue1: rgba(0, 0, 255, 1);\n}\n\n/* General Styling */\n* {\n\tbox-sizing: border-box;\n  font-family: 'GT Ultra Standard', sans-serif;\n\tcolor: var(--yellow1)\n}\n\nhtml {\n  background-color: var(--blue1);\n}\n\nbody {\n  background-color: var(--blue1);\n}\n\n.disable-transitions-onload {\n  transition: none !important;\n}\n\n/* Main Page Styling */\n#main-container {\n\tposition: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  width: 100%;\n  height: 400rem;\n\t/* Margin for wave */\n\tmargin-bottom: 7rem;\n}\n\n/* Home Container */\n#home-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 95vh;\n\t/* border: 1px solid red; */\n}\n\n#home-container h1 {\n\tpadding: 0rem 3rem;\n  font-family: 'GT Ultra Median', sans-serif;\n\ttext-align: center;\n  font-size: 8rem;\n\t/* border: 1px solid green; */\n}\n\n#home-container h3 {\n\tpadding: 0rem 3rem;\n\tmargin-top: 0.5rem;\n\tcolor: white;\n  font-size: 2rem;\n\ttext-align: center;\n\tline-height: 2.25rem; /* Font size + space between each line */\n\tfont-family: 'GT Light Median', sans-serif;\n\t/* border: 1px solid black; */\n}\n\n/* Scroll Container */\n#scroll-container {\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: 25vh;\n}\n\n#scroll-container span {\n  font-family: 'GT Light Median', sans-serif;\n  font-size: 1rem;\n  color: white;\n\tcolor: var(--yellow1);\n}\n\n.scroll-inner-container {\n\tdisplay: flex;\n\tflex-direction: row;\n\twidth: 100%;\n\theight: 21vh;\n}\n\n.scroll-inner-container > div {\n\twidth: 50%;\n}\n\n.scroll-inner-container :last-child {\n\tborder-left: 0.5px solid var(--yellow1);\n}\n\n/* Image Container */\n#stats-container {\n\tposition: relative;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\twidth: 85%;\n\theight: 200vh;\n\tmargin: 10vh 10vw;\n\tpadding: 3rem;\n\tborder: 1px solid red;\n}\n\n#stats-container > div {\n\talign-self: flex-start;\n\tmargin-left: 3rem;\n\tfont-size: 2rem;\n\tfont-family: 'GT Thin Median';\n}\n\n#stats-container > :nth-child(6) {\n\talign-self: flex-end;\n\tfont-size: 2rem;\n\tfont-family: 'GT Light Median';\n}\n\n#stats-container .turn {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tmargin-left: 0rem;\n\twriting-mode: vertical-lr;\n\ttransform: rotate(180deg);\n}\n\n.question {\n\tmargin-top: 0.75rem;\n}\n\n.question span {\n\tfont-size: 4rem;\n\tfont-family: 'GT Ultra Fine';\n}\n\n.answer {\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: flex-start;\n\tmargin-top: 0.75rem;\n}\n\n.answer span {\n\twhite-space: pre-wrap;\n}\n\n#stats-container i {\n\tfont-family: 'GT Thin Median Italic';\n\ttext-decoration: line-through;\n\ttext-decoration-thickness: 0.1rem;\n}\n\n#stats-container .quote {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-end;\n\talign-self: flex-end;\n\tmargin-top: 2rem;\n\tmargin-left: 20vw;\n\tfont-size: 2rem;\n\tfont-family: 'GT Light Median';\n}\n\n#stats-container .quote span {\n\ttext-align: right;\n}\n\n#stats-container .quote :first-child {\n\tmargin-bottom: 0.25rem;\n}\n\n/* Wave at bottom of main container */\n.bottom-wave {\n  position: absolute;\n  bottom: -1.5rem;\n  left: 0;\n  width: 100%;\n  overflow: hidden;\n  line-height: 0;\n}\n\n.bottom-wave svg {\n  position: relative;\n  display: block;\n  width: calc(139% + 1.3px);\n  height: 1.5rem;\n}\n\n.bottom-wave .wave-fill {\n  fill: var(--blue1);\n}\n\n/* Footer Styling */\n#footer-container {\n\tposition: fixed;\n\tbottom: 0;\n\tdisplay: grid;\n\tgrid-template-columns: repeat(3, 1fr);\n\twidth: 100%;\n\tpadding: 10rem 3rem 2.5rem 3rem;\n\tmargin-top: auto;\n\tbackground-color: var(--yellow1);\n\tz-index: -1;\n}\n\n#footer-container span {\n\tfont-size: 0.75rem;\n\tfont-family: 'GT Light Median';\n\ttext-transform: uppercase;\n\tcolor: var(--blue1);\n\tcursor: pointer;\n}\n\n.footer-left {\n\tjustify-self: start;\n}\n\n.footer-center {\n\tjustify-self: center;\n}\n\n.footer-right {\n\tjustify-self: end;\n}\n\n.footer-center span,\n.footer-right span {\n\tpadding-left: 0.25rem;\n\tpadding-right: 0.5rem;\n\tborder-right: 1px solid var(--blue1);\n}\n\n.footer-center :last-child ,\n.footer-right :last-child {\n\tpadding-right: 0;\n\tborder-right: none;\n}\n\n.footer-center :first-child ,\n.footer-right :first-child {\n\tpadding-left: 0;\n}\n\n/* Logo Styling */\n#logo-container {\n\tposition: fixed;\n  top: 2rem;\n  left: 2.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n\tz-index: 200;\n}\n\n#logo-container span {\n\tcolor: var(--yellow1);\n\tfont-size: 0.9rem;\n\tfont-family: 'GT Ultra Fine';\n\tanimation: 0.8s linear logo-blue-to-yellow;\n}\n\n#logo-container.show-menu span {\n\tcolor: var(--blue1);\n\tanimation: 0.3s linear logo-yellow-to-blue;\n}\n\n@keyframes logo-yellow-to-blue {\n  0% { color: var(--yellow1); }\n  100% { color: var(--blue1); }\n}\n\n@keyframes logo-blue-to-yellow {\n  0% { color: var(--blue1); }\n  100% { color: var(--yellow1); }\n}\n\n/* Menu Icon Styling */\n#menu-toggle {\n\tposition: fixed;\n  top: 2.25rem;\n  right: 2.5rem;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 1.9rem;\n  width: 1.9rem;\n\tcursor: pointer;\n\tz-index: 200;\n}\n\n#menu-toggle .menu-bar {\n  height: 0.2rem;\n  width: 100%;\n  background-color: var(--yellow1);\n  transition: all 800ms ease-in-out;\n}\n\n#menu-toggle .menu-selected {\n  transition: all 200ms ease-in-out;\n  background-color: var(--blue1);\n  transform-origin: top left;\n}\n\n#menu-toggle .menu-selected:nth-of-type(1) {\n  transition: all 500ms ease-in-out;\n  transform: rotate(45deg);\n  transform-origin: top left;\n  width: 2.45rem;\n}\n\n#menu-toggle .menu-selected:nth-of-type(2) {\n  transition: all 100ms ease-in-out;\n  transform-origin: center;\n  width: 0;\n}\n\n#menu-toggle .menu-selected:nth-of-type(3) {\n  transition: all 500ms ease-in-out;\n  transform: rotate(-45deg);\n  transform-origin: bottom left;\n  width: 2.45rem;\n}\n\n/* Menu Styling */\n#menu-container {\n\tdisplay: flex;\n\tflex-direction: row;\n\tjustify-content: center;\n\talign-items: center;\n\tposition: absolute;\n\ttop: -100vh;\n\tleft: 0;\n\twidth: 100%;\n\theight: 100vh;\n\tbackground-color: var(--yellow1);\n\tz-index: 100;\n\ttransition: all 750ms ease-in-out;\n}\n\n#menu-container.show-menu {\n\tposition: fixed;\n\ttop: 0;\n\tleft: 0;\n\ttransition: all 750ms ease-in-out;\n}\n\n/* Menu Media Styling */\n.media-links-container {\n\tposition: absolute;\n\ttop: 75vh;\n\tleft: 50vw;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: flex-start;\n}\n\n.media-links-container div {\n\tposition: relative;\n\tmargin-bottom: 0.75rem;\n\tcursor: pointer;\n}\n\n.media-links-container div a {\n\tcolor: var(--blue1);\n\ttext-decoration: none;\n\ttext-transform: uppercase;\n\tletter-spacing: 0.15rem;\n\tfont-family: 'GT Light Median', sans-serif;\n}\n\n/* Media Links Underline Styling */\n.fade-underline {\n  position: relative;\n  text-decoration: none;\n  display: inline-block;\n}\n\n.fade-underline:after {\n  display: block;\n  content: '';\n  border-bottom: 1px solid var(--blue1);\n  transform: scaleX(0);\n  transition: transform 250ms ease-in-out;\n  transform-origin: 100% 50%\n}\n\n.fade-underline:hover:after {\n  transform: scaleX(1);\n  transform-origin: 0 50%;\n}\n"],sourceRoot:""}]);const c=a},t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(o," */"),r=e.sources.map((function(t){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(t," */")}));return[n].concat(r).concat([s]).join("\n")}return[n].join("\n")}},t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",i=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),i&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),i&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,i,o,s){"string"==typeof t&&(t=[[null,t,void 0]]);var r={};if(i)for(var l=0;l<this.length;l++){var a=this[l][0];null!=a&&(r[a]=!0)}for(var c=0;c<t.length;c++){var f=[].concat(t[c]);i&&r[f[0]]||(void 0!==s&&(void 0===f[5]||(f[1]="@layer".concat(f[5].length>0?" ".concat(f[5]):""," {").concat(f[1],"}")),f[5]=s),e&&(f[2]?(f[1]="@media ".concat(f[2]," {").concat(f[1],"}"),f[2]=e):f[2]=e),o&&(f[4]?(f[1]="@supports (".concat(f[4],") {").concat(f[1],"}"),f[4]=o):f[4]="".concat(o)),n.push(f))}},n}},(t,n,e)=>{e.r(n),e.d(n,{default:()=>kt});var i=e(9),o=e.n(i),s=e(10),r=e.n(s),l=e(12),a=e.n(l),c=new URL(e(13),e.b),f=new URL(e(14),e.b),A=new URL(e(15),e.b),h=new URL(e(16),e.b),d=new URL(e(17),e.b),u=new URL(e(18),e.b),m=new URL(e(19),e.b),p=new URL(e(20),e.b),C=new URL(e(21),e.b),B=new URL(e(22),e.b),g=new URL(e(23),e.b),y=new URL(e(24),e.b),w=new URL(e(25),e.b),b=new URL(e(26),e.b),v=new URL(e(27),e.b),k=new URL(e(28),e.b),E=new URL(e(29),e.b),x=new URL(e(30),e.b),T=new URL(e(31),e.b),I=new URL(e(32),e.b),S=new URL(e(33),e.b),D=new URL(e(34),e.b),L=new URL(e(35),e.b),M=new URL(e(36),e.b),O=new URL(e(37),e.b),R=new URL(e(38),e.b),j=new URL(e(39),e.b),G=new URL(e(40),e.b),U=new URL(e(41),e.b),q=new URL(e(42),e.b),W=new URL(e(43),e.b),z=new URL(e(44),e.b),Y=new URL(e(45),e.b),F=new URL(e(46),e.b),_=r()(o()),H=a()(c),P=a()(f),X=a()(A),V=a()(h),K=a()(d),N=a()(u),$=a()(m),Z=a()(p),Q=a()(C),J=a()(B),tt=a()(g),nt=a()(y),et=a()(w),it=a()(b),ot=a()(v),st=a()(k),rt=a()(E),lt=a()(x),at=a()(T),ct=a()(I),ft=a()(S),At=a()(D),ht=a()(L),dt=a()(M),ut=a()(O),mt=a()(R),pt=a()(j),Ct=a()(G),Bt=a()(U),gt=a()(q),yt=a()(W),wt=a()(z),bt=a()(Y),vt=a()(F);_.push([t.id,"/* GT ULTRA FONT */\n/* Ultra */\n@font-face {\n    font-family: 'GT Ultra Standard';\n    src: url("+H+") format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Ultra Median';\n    src: url("+P+") format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n\n@font-face {\n    font-family: 'GT Ultra Fine';\n    src: url("+X+") format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n/* Black */\n@font-face {\n    font-family: 'GT Black Standard';\n    src: url("+V+") format('woff');\n    font-weight: 900;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Black Italic';\n    src: url("+K+") format('woff');\n    font-weight: 900;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Black Median';\n    src: url("+N+") format('woff');\n    font-weight: 900;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Black Median Italic';\n    src: url("+$+") format('woff');\n    font-weight: 900;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Black Fine';\n    src: url("+Z+") format('woff');\n    font-weight: 900;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Black Fine Italic';\n    src: url("+Q+") format('woff');\n    font-weight: 900;\n    font-style: italic;\n    font-display: swap;\n}\n\n/* Bold */\n@font-face {\n    font-family: 'GT Bold Standard';\n    src: url("+J+") format('woff');\n    font-weight: bold;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Bold Italic';\n    src: url("+tt+") format('woff');\n    font-weight: bold;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Bold Median';\n    src: url("+nt+") format('woff');\n    font-weight: bold;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Bold Median Italic';\n    src: url("+et+") format('woff');\n    font-weight: bold;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Bold Fine';\n    src: url("+it+") format('woff');\n    font-weight: bold;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Bold Fine Italic';\n    src: url("+ot+") format('woff');\n    font-weight: bold;\n    font-style: italic;\n    font-display: swap;\n}\n\n/* Regular */\n@font-face {\n    font-family: 'GT Regular';\n    src: url("+st+") format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Regular Italic';\n    src: url("+rt+") format('woff');\n    font-weight: normal;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Regular Median';\n    src: url("+lt+") format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Regular Median Italic';\n    src: url("+at+") format('woff');\n    font-weight: normal;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Regular Fine';\n    src: url("+ct+") format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Regular Fine Italic';\n    src: url("+ft+") format('woff');\n    font-weight: normal;\n    font-style: italic;\n    font-display: swap;\n}\n\n/* Light */\n@font-face {\n    font-family: 'GT Light';\n    src: url("+At+") format('woff');\n    font-weight: 300;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Light Italic';\n    src: url("+ht+") format('woff');\n    font-weight: 300;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Light Median';\n    src: url("+dt+") format('woff');\n    font-weight: 300;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Light Median Italic';\n    src: url("+ut+") format('woff');\n    font-weight: 300;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Light Fine';\n    src: url("+mt+") format('woff');\n    font-weight: 300;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Light Fine Italic';\n    src: url("+pt+") format('woff');\n    font-weight: 300;\n    font-style: italic;\n    font-display: swap;\n}\n\n/* Thin */\n@font-face {\n    font-family: 'GT Thin';\n    src: url("+Ct+") format('woff');\n    font-weight: 100;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Thin Italic';\n    src: url("+Bt+") format('woff');\n    font-weight: 100;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Thin Median';\n    src: url("+gt+") format('woff');\n    font-weight: 100;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Thin Median Italic';\n    src: url("+yt+") format('woff');\n    font-weight: 100;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Thin Fine';\n    src: url("+wt+") format('woff');\n    font-weight: 100;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Thin Fine Italic';\n    src: url("+bt+") format('woff');\n    font-weight: 100;\n    font-style: italic;\n    font-display: swap;\n}\n\n/* MARKER FONT */\n@font-face {\n    font-family: 'BrownBagLunch';\n    src: url("+vt+") format('woff');\n    font-weight: 500;\n    font-style: normal;\n    font-display: swap;\n}\n","",{version:3,sources:["webpack://./src/fonts.css"],names:[],mappings:"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",sourcesContent:["/* GT ULTRA FONT */\n/* Ultra */\n@font-face {\n    font-family: 'GT Ultra Standard';\n    src: url('./fonts/GTUltra-Ultra.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Ultra Median';\n    src: url('./fonts/GTUltraMedian-Ultra.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n\n@font-face {\n    font-family: 'GT Ultra Fine';\n    src: url('./fonts/GTUltraFine-Ultra.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n/* Black */\n@font-face {\n    font-family: 'GT Black Standard';\n    src: url('./fonts/GTUltra-Black.woff') format('woff');\n    font-weight: 900;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Black Italic';\n    src: url('./fonts/GTUltra-BlackItalic.woff') format('woff');\n    font-weight: 900;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Black Median';\n    src: url('./fonts/GTUltraMedian-Black.woff') format('woff');\n    font-weight: 900;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Black Median Italic';\n    src: url('./fonts/GTUltraMedian-BlackItalic.woff') format('woff');\n    font-weight: 900;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Black Fine';\n    src: url('./fonts/GTUltraFine-Black.woff') format('woff');\n    font-weight: 900;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Black Fine Italic';\n    src: url('./fonts/GTUltraFine-BlackItalic.woff') format('woff');\n    font-weight: 900;\n    font-style: italic;\n    font-display: swap;\n}\n\n/* Bold */\n@font-face {\n    font-family: 'GT Bold Standard';\n    src: url('./fonts/GTUltra-Bold.woff') format('woff');\n    font-weight: bold;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Bold Italic';\n    src: url('./fonts/GTUltra-BoldItalic.woff') format('woff');\n    font-weight: bold;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Bold Median';\n    src: url('./fonts/GTUltraMedian-Bold.woff') format('woff');\n    font-weight: bold;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Bold Median Italic';\n    src: url('./fonts/GTUltraMedian-BoldItalic.woff') format('woff');\n    font-weight: bold;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Bold Fine';\n    src: url('./fonts/GTUltraFine-Bold.woff') format('woff');\n    font-weight: bold;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Bold Fine Italic';\n    src: url('./fonts/GTUltraFine-BoldItalic.woff') format('woff');\n    font-weight: bold;\n    font-style: italic;\n    font-display: swap;\n}\n\n/* Regular */\n@font-face {\n    font-family: 'GT Regular';\n    src: url('./fonts/GTUltra-Regular.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Regular Italic';\n    src: url('./fonts/GTUltra-RegularItalic.woff') format('woff');\n    font-weight: normal;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Regular Median';\n    src: url('./fonts/GTUltraMedian-Regular.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Regular Median Italic';\n    src: url('./fonts/GTUltraMedian-RegularItalic.woff') format('woff');\n    font-weight: normal;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Regular Fine';\n    src: url('./fonts/GTUltraFine-Regular.woff') format('woff');\n    font-weight: normal;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Regular Fine Italic';\n    src: url('./fonts/GTUltraFine-RegularItalic.woff') format('woff');\n    font-weight: normal;\n    font-style: italic;\n    font-display: swap;\n}\n\n/* Light */\n@font-face {\n    font-family: 'GT Light';\n    src: url('./fonts/GTUltra-Light.woff') format('woff');\n    font-weight: 300;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Light Italic';\n    src: url('./fonts/GTUltra-LightItalic.woff') format('woff');\n    font-weight: 300;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Light Median';\n    src: url('./fonts/GTUltraMedian-Light.woff') format('woff');\n    font-weight: 300;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Light Median Italic';\n    src: url('./fonts/GTUltraMedian-LightItalic.woff') format('woff');\n    font-weight: 300;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Light Fine';\n    src: url('./fonts/GTUltraFine-Light.woff') format('woff');\n    font-weight: 300;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Light Fine Italic';\n    src: url('./fonts/GTUltraFine-LightItalic.woff') format('woff');\n    font-weight: 300;\n    font-style: italic;\n    font-display: swap;\n}\n\n/* Thin */\n@font-face {\n    font-family: 'GT Thin';\n    src: url('./fonts/GTUltra-Thin.woff') format('woff');\n    font-weight: 100;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Thin Italic';\n    src: url('./fonts/GTUltra-ThinItalic.woff') format('woff');\n    font-weight: 100;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Thin Median';\n    src: url('./fonts/GTUltraMedian-Thin.woff') format('woff');\n    font-weight: 100;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Thin Median Italic';\n    src: url('./fonts/GTUltraMedian-ThinItalic.woff') format('woff');\n    font-weight: 100;\n    font-style: italic;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Thin Fine';\n    src: url('./fonts/GTUltraFine-Thin.woff') format('woff');\n    font-weight: 100;\n    font-style: normal;\n    font-display: swap;\n}\n\n@font-face {\n    font-family: 'GT Thin Fine Italic';\n    src: url('./fonts/GTUltraFine-ThinItalic.woff') format('woff');\n    font-weight: 100;\n    font-style: italic;\n    font-display: swap;\n}\n\n/* MARKER FONT */\n@font-face {\n    font-family: 'BrownBagLunch';\n    src: url('./fonts/BrownBagLunch.woff') format('woff');\n    font-weight: 500;\n    font-style: normal;\n    font-display: swap;\n}\n"],sourceRoot:""}]);const kt=_},t=>{t.exports=function(t,n){return n||(n={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),n.hash&&(t+=n.hash),/["'() \t\n]|(%20)/.test(t)||n.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},(t,n,e)=>{t.exports=e.p+"fc6bba11dfc0180151b9.woff"},(t,n,e)=>{t.exports=e.p+"7d64dc2ef90119a0d159.woff"},(t,n,e)=>{t.exports=e.p+"27b588b6d6701477a699.woff"},(t,n,e)=>{t.exports=e.p+"09557503987ef3f72c04.woff"},(t,n,e)=>{t.exports=e.p+"d3b28e52c1649280e78b.woff"},(t,n,e)=>{t.exports=e.p+"420d6a5c3ae8d84c9757.woff"},(t,n,e)=>{t.exports=e.p+"d7db880e3541f5242eee.woff"},(t,n,e)=>{t.exports=e.p+"df7985b9a234042e3259.woff"},(t,n,e)=>{t.exports=e.p+"25eb2692c2fd85ec994d.woff"},(t,n,e)=>{t.exports=e.p+"3e89bb8a530bf58c62f6.woff"},(t,n,e)=>{t.exports=e.p+"ab618d471a4abae57528.woff"},(t,n,e)=>{t.exports=e.p+"11990d270a22329406b8.woff"},(t,n,e)=>{t.exports=e.p+"2a1e03fd7eb4ef3bbade.woff"},(t,n,e)=>{t.exports=e.p+"733e0cf42724f2d43f38.woff"},(t,n,e)=>{t.exports=e.p+"1dc0cd86ef0e3d54b2cf.woff"},(t,n,e)=>{t.exports=e.p+"d21e1ef2d1b0a9196f3c.woff"},(t,n,e)=>{t.exports=e.p+"660c4f9e17af41433f39.woff"},(t,n,e)=>{t.exports=e.p+"7a23afcefd6b446da4a7.woff"},(t,n,e)=>{t.exports=e.p+"81470afc4761e7aedc0a.woff"},(t,n,e)=>{t.exports=e.p+"e14cf3924e6b9ecd0a4b.woff"},(t,n,e)=>{t.exports=e.p+"4d473c8ba0b8b1d4f9db.woff"},(t,n,e)=>{t.exports=e.p+"69839954bd435f72a738.woff"},(t,n,e)=>{t.exports=e.p+"91566048a73e19f3d19b.woff"},(t,n,e)=>{t.exports=e.p+"aac77bca428ed9839d55.woff"},(t,n,e)=>{t.exports=e.p+"7f7a071a05d37d324325.woff"},(t,n,e)=>{t.exports=e.p+"8f7d71692010f3288754.woff"},(t,n,e)=>{t.exports=e.p+"3710e7e1d285664b46e4.woff"},(t,n,e)=>{t.exports=e.p+"8183b34a5f5a7278a5f1.woff"},(t,n,e)=>{t.exports=e.p+"5fe7ea3d628446b5fcc1.woff"},(t,n,e)=>{t.exports=e.p+"8974dc1a31d6d3f4b24c.woff"},(t,n,e)=>{t.exports=e.p+"afac7abc39ae902b8c6f.woff"},(t,n,e)=>{t.exports=e.p+"17c45c040b0399409c6e.woff"},(t,n,e)=>{t.exports=e.p+"5fe8746567979e5bc308.woff"},(t,n,e)=>{t.exports=e.p+"beda0622339048ef9d6a.woff"},(t,n,e)=>{e.r(n),e.d(n,{default:()=>o});e(1);var i=e(48);class o{constructor(){this.value="HECK"}start(){this.createUI(),this.addListeners()}createUI(){this.randomSlogan()}addListeners(){this.menuToggleListener()}parallaxScrolling(){new Rellax(".rellax",{wrapper:"#stats-container"})}randomSlogan(){const t=document.getElementById("slogan-container"),n=Math.floor(Math.random()*i.slogans.length),e=i.slogans[n];t.textContent=e}menuToggleListener(){const t=document.getElementById("logo-container"),n=document.querySelectorAll(".menu-bar"),e=document.getElementById("menu-toggle"),i=document.getElementById("menu-container"),o=document.getElementById("main-container");e.addEventListener("click",(()=>{n.forEach((t=>t.classList.toggle("menu-selected"))),i.classList.toggle("show-menu"),o.classList.add("show-menu"),t.classList.toggle("show-menu")}))}}},(t,n,e)=>{e.r(n),e.d(n,{slogans:()=>i});const i=["Your government doesn't care about you","Your politicians do not care about you","Your government has nothing but contempt for you","The duty of a patriot is to protect his country from its government","Love your country, not your government","If voting changed anything, they'd make it illegal"]},(t,n,e)=>{function i(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function o(t,n){for(var e=0;e<n.length;e++){var i=n[e];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}function s(t,n,e){return n&&o(t.prototype,n),e&&o(t,e),t}function r(t,n,e){return n in t?Object.defineProperty(t,n,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[n]=e,t}function l(t,n){var e=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),e.push.apply(e,i)}return e}function a(t){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?l(Object(e),!0).forEach((function(n){r(t,n,e[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(e)):l(Object(e)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(e,n))}))}return t}function c(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&A(t,n)}function f(t){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},f(t)}function A(t,n){return A=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t},A(t,n)}function h(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function d(t,n){return!n||"object"!=typeof n&&"function"!=typeof n?h(t):n}function u(t){var n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}();return function(){var e,i=f(t);if(n){var o=f(this).constructor;e=Reflect.construct(i,arguments,o)}else e=i.apply(this,arguments);return d(this,e)}}function m(t,n,e){return m="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(t,n,e){var i=function(t,n){for(;!Object.prototype.hasOwnProperty.call(t,n)&&null!==(t=f(t)););return t}(t,n);if(i){var o=Object.getOwnPropertyDescriptor(i,n);return o.get?o.get.call(e):o.value}},m(t,n,e||t)}function p(t,n){return function(t){if(Array.isArray(t))return t}(t)||function(t,n){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(t)))return;var e=[],i=!0,o=!1,s=void 0;try{for(var r,l=t[Symbol.iterator]();!(i=(r=l.next()).done)&&(e.push(r.value),!n||e.length!==n);i=!0);}catch(t){o=!0,s=t}finally{try{i||null==l.return||l.return()}finally{if(o)throw s}}return e}(t,n)||B(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function C(t){return function(t){if(Array.isArray(t))return g(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||B(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function B(t,n){if(t){if("string"==typeof t)return g(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);return"Object"===e&&t.constructor&&(e=t.constructor.name),"Map"===e||"Set"===e?Array.from(t):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?g(t,n):void 0}}function g(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,i=new Array(n);e<n;e++)i[e]=t[e];return i}e.r(n),e.d(n,{Native:()=>mt,Smooth:()=>ut,default:()=>pt});var y={el:document,name:"scroll",offset:[0,0],repeat:!1,smooth:!1,initPosition:{x:0,y:0},direction:"vertical",gestureDirection:"vertical",reloadOnContextChange:!1,lerp:.1,class:"is-inview",scrollbarContainer:!1,scrollbarClass:"c-scrollbar",scrollingClass:"has-scroll-scrolling",draggingClass:"has-scroll-dragging",smoothClass:"has-scroll-smooth",initClass:"has-scroll-init",getSpeed:!1,getDirection:!1,scrollFromAnywhere:!1,multiplier:1,firefoxMultiplier:50,touchMultiplier:2,resetNativeScroll:!0,tablet:{smooth:!1,direction:"vertical",gestureDirection:"vertical",breakpoint:1024},smartphone:{smooth:!1,direction:"vertical",gestureDirection:"vertical"}},w=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};i(this,t),Object.assign(this,y,n),this.smartphone=y.smartphone,n.smartphone&&Object.assign(this.smartphone,n.smartphone),this.tablet=y.tablet,n.tablet&&Object.assign(this.tablet,n.tablet),this.namespace="locomotive",this.html=document.documentElement,this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.els={},this.currentElements={},this.listeners={},this.hasScrollTicking=!1,this.hasCallEventSet=!1,this.checkScroll=this.checkScroll.bind(this),this.checkResize=this.checkResize.bind(this),this.checkEvent=this.checkEvent.bind(this),this.instance={scroll:{x:0,y:0},limit:{x:this.html.offsetWidth,y:this.html.offsetHeight},currentElements:this.currentElements},this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",this.isMobile&&(this.direction=this[this.context].direction),"horizontal"===this.direction?this.directionAxis="x":this.directionAxis="y",this.getDirection&&(this.instance.direction=null),this.getDirection&&(this.instance.speed=0),this.html.classList.add(this.initClass),window.addEventListener("resize",this.checkResize,!1)}return s(t,[{key:"init",value:function(){this.initEvents()}},{key:"checkScroll",value:function(){this.dispatchScroll()}},{key:"checkResize",value:function(){var t=this;this.resizeTick||(this.resizeTick=!0,requestAnimationFrame((function(){t.resize(),t.resizeTick=!1})))}},{key:"resize",value:function(){}},{key:"checkContext",value:function(){if(this.reloadOnContextChange){this.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||this.windowWidth<this.tablet.breakpoint,this.isTablet=this.isMobile&&this.windowWidth>=this.tablet.breakpoint;var t=this.context;if(this.isMobile?this.isTablet?this.context="tablet":this.context="smartphone":this.context="desktop",t!=this.context)("desktop"==t?this.smooth:this[t].smooth)!=("desktop"==this.context?this.smooth:this[this.context].smooth)&&window.location.reload()}}},{key:"initEvents",value:function(){var t=this;this.scrollToEls=this.el.querySelectorAll("[data-".concat(this.name,"-to]")),this.setScrollTo=this.setScrollTo.bind(this),this.scrollToEls.forEach((function(n){n.addEventListener("click",t.setScrollTo,!1)}))}},{key:"setScrollTo",value:function(t){t.preventDefault(),this.scrollTo(t.currentTarget.getAttribute("data-".concat(this.name,"-href"))||t.currentTarget.getAttribute("href"),{offset:t.currentTarget.getAttribute("data-".concat(this.name,"-offset"))})}},{key:"addElements",value:function(){}},{key:"detectElements",value:function(t){var n=this,e=this.instance.scroll.y,i=e+this.windowHeight,o=this.instance.scroll.x,s=o+this.windowWidth;Object.entries(this.els).forEach((function(r){var l=p(r,2),a=l[0],c=l[1];if(!c||c.inView&&!t||("horizontal"===n.direction?s>=c.left&&o<c.right&&n.setInView(c,a):i>=c.top&&e<c.bottom&&n.setInView(c,a)),c&&c.inView)if("horizontal"===n.direction){var f=c.right-c.left;c.progress=(n.instance.scroll.x-(c.left-n.windowWidth))/(f+n.windowWidth),(s<c.left||o>c.right)&&n.setOutOfView(c,a)}else{var A=c.bottom-c.top;c.progress=(n.instance.scroll.y-(c.top-n.windowHeight))/(A+n.windowHeight),(i<c.top||e>c.bottom)&&n.setOutOfView(c,a)}})),this.hasScrollTicking=!1}},{key:"setInView",value:function(t,n){this.els[n].inView=!0,t.el.classList.add(t.class),this.currentElements[n]=t,t.call&&this.hasCallEventSet&&(this.dispatchCall(t,"enter"),t.repeat||(this.els[n].call=!1))}},{key:"setOutOfView",value:function(t,n){var e=this;this.els[n].inView=!1,Object.keys(this.currentElements).forEach((function(t){t===n&&delete e.currentElements[t]})),t.call&&this.hasCallEventSet&&this.dispatchCall(t,"exit"),t.repeat&&t.el.classList.remove(t.class)}},{key:"dispatchCall",value:function(t,n){this.callWay=n,this.callValue=t.call.split(",").map((function(t){return t.trim()})),this.callObj=t,1==this.callValue.length&&(this.callValue=this.callValue[0]);var e=new Event(this.namespace+"call");this.el.dispatchEvent(e)}},{key:"dispatchScroll",value:function(){var t=new Event(this.namespace+"scroll");this.el.dispatchEvent(t)}},{key:"setEvents",value:function(t,n){this.listeners[t]||(this.listeners[t]=[]);var e=this.listeners[t];e.push(n),1===e.length&&this.el.addEventListener(this.namespace+t,this.checkEvent,!1),"call"===t&&(this.hasCallEventSet=!0,this.detectElements(!0))}},{key:"unsetEvents",value:function(t,n){if(this.listeners[t]){var e=this.listeners[t],i=e.indexOf(n);i<0||(e.splice(i,1),0===e.index&&this.el.removeEventListener(this.namespace+t,this.checkEvent,!1))}}},{key:"checkEvent",value:function(t){var n=this,e=t.type.replace(this.namespace,""),i=this.listeners[e];i&&0!==i.length&&i.forEach((function(t){switch(e){case"scroll":return t(n.instance);case"call":return t(n.callValue,n.callWay,n.callObj);default:return t()}}))}},{key:"startScroll",value:function(){}},{key:"stopScroll",value:function(){}},{key:"setScroll",value:function(t,n){this.instance.scroll={x:0,y:0}}},{key:"destroy",value:function(){var t=this;window.removeEventListener("resize",this.checkResize,!1),Object.keys(this.listeners).forEach((function(n){t.el.removeEventListener(t.namespace+n,t.checkEvent,!1)})),this.listeners={},this.scrollToEls.forEach((function(n){n.removeEventListener("click",t.setScrollTo,!1)})),this.html.classList.remove(this.initClass)}}]),t}(),b="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e.g?e.g:"undefined"!=typeof self?self:{};function v(t,n){return t(n={exports:{}},n.exports),n.exports}var k=v((function(t,n){t.exports={polyfill:function(){var t=window,n=document;if(!("scrollBehavior"in n.documentElement.style)||!0===t.__forceSmoothScrollPolyfill__){var e,i=t.HTMLElement||t.Element,o={scroll:t.scroll||t.scrollTo,scrollBy:t.scrollBy,elementScroll:i.prototype.scroll||l,scrollIntoView:i.prototype.scrollIntoView},s=t.performance&&t.performance.now?t.performance.now.bind(t.performance):Date.now,r=(e=t.navigator.userAgent,new RegExp(["MSIE ","Trident/","Edge/"].join("|")).test(e)?1:0);t.scroll=t.scrollTo=function(){void 0!==arguments[0]&&(!0!==a(arguments[0])?u.call(t,n.body,void 0!==arguments[0].left?~~arguments[0].left:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?~~arguments[0].top:t.scrollY||t.pageYOffset):o.scroll.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:t.scrollX||t.pageXOffset,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:t.scrollY||t.pageYOffset))},t.scrollBy=function(){void 0!==arguments[0]&&(a(arguments[0])?o.scrollBy.call(t,void 0!==arguments[0].left?arguments[0].left:"object"!=typeof arguments[0]?arguments[0]:0,void 0!==arguments[0].top?arguments[0].top:void 0!==arguments[1]?arguments[1]:0):u.call(t,n.body,~~arguments[0].left+(t.scrollX||t.pageXOffset),~~arguments[0].top+(t.scrollY||t.pageYOffset)))},i.prototype.scroll=i.prototype.scrollTo=function(){if(void 0!==arguments[0])if(!0!==a(arguments[0])){var t=arguments[0].left,n=arguments[0].top;u.call(this,this,void 0===t?this.scrollLeft:~~t,void 0===n?this.scrollTop:~~n)}else{if("number"==typeof arguments[0]&&void 0===arguments[1])throw new SyntaxError("Value could not be converted");o.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left:"object"!=typeof arguments[0]?~~arguments[0]:this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top:void 0!==arguments[1]?~~arguments[1]:this.scrollTop)}},i.prototype.scrollBy=function(){void 0!==arguments[0]&&(!0!==a(arguments[0])?this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior}):o.elementScroll.call(this,void 0!==arguments[0].left?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,void 0!==arguments[0].top?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop))},i.prototype.scrollIntoView=function(){if(!0!==a(arguments[0])){var e=h(this),i=e.getBoundingClientRect(),s=this.getBoundingClientRect();e!==n.body?(u.call(this,e,e.scrollLeft+s.left-i.left,e.scrollTop+s.top-i.top),"fixed"!==t.getComputedStyle(e).position&&t.scrollBy({left:i.left,top:i.top,behavior:"smooth"})):t.scrollBy({left:s.left,top:s.top,behavior:"smooth"})}else o.scrollIntoView.call(this,void 0===arguments[0]||arguments[0])}}function l(t,n){this.scrollLeft=t,this.scrollTop=n}function a(t){if(null===t||"object"!=typeof t||void 0===t.behavior||"auto"===t.behavior||"instant"===t.behavior)return!0;if("object"==typeof t&&"smooth"===t.behavior)return!1;throw new TypeError("behavior member of ScrollOptions "+t.behavior+" is not a valid value for enumeration ScrollBehavior.")}function c(t,n){return"Y"===n?t.clientHeight+r<t.scrollHeight:"X"===n?t.clientWidth+r<t.scrollWidth:void 0}function f(n,e){var i=t.getComputedStyle(n,null)["overflow"+e];return"auto"===i||"scroll"===i}function A(t){var n=c(t,"Y")&&f(t,"Y"),e=c(t,"X")&&f(t,"X");return n||e}function h(t){for(;t!==n.body&&!1===A(t);)t=t.parentNode||t.host;return t}function d(n){var e,i,o,r,l=(s()-n.startTime)/468;r=l=l>1?1:l,e=.5*(1-Math.cos(Math.PI*r)),i=n.startX+(n.x-n.startX)*e,o=n.startY+(n.y-n.startY)*e,n.method.call(n.scrollable,i,o),i===n.x&&o===n.y||t.requestAnimationFrame(d.bind(t,n))}function u(e,i,r){var a,c,f,A,h=s();e===n.body?(a=t,c=t.scrollX||t.pageXOffset,f=t.scrollY||t.pageYOffset,A=o.scroll):(a=e,c=e.scrollLeft,f=e.scrollTop,A=l),d({scrollable:a,method:A,startTime:h,startX:c,startY:f,x:i,y:r})}}}})),E=(k.polyfill,function(t){c(e,t);var n=u(e);function e(){var t,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return i(this,e),(t=n.call(this,o)).resetNativeScroll&&(history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0)),window.addEventListener("scroll",t.checkScroll,!1),void 0===window.smoothscrollPolyfill&&(window.smoothscrollPolyfill=k,window.smoothscrollPolyfill.polyfill()),t}return s(e,[{key:"init",value:function(){this.instance.scroll.y=window.pageYOffset,this.addElements(),this.detectElements(),m(f(e.prototype),"init",this).call(this)}},{key:"checkScroll",value:function(){var t=this;m(f(e.prototype),"checkScroll",this).call(this),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.instance.scroll.y=window.pageYOffset,Object.entries(this.els).length&&(this.hasScrollTicking||(requestAnimationFrame((function(){t.detectElements()})),this.hasScrollTicking=!0))}},{key:"addDirection",value:function(){window.pageYOffset>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):window.pageYOffset<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up")}},{key:"addSpeed",value:function(){window.pageYOffset!=this.instance.scroll.y?this.instance.speed=(window.pageYOffset-this.instance.scroll.y)/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"resize",value:function(){Object.entries(this.els).length&&(this.windowHeight=window.innerHeight,this.updateElements())}},{key:"addElements",value:function(){var t=this;this.els={},this.el.querySelectorAll("[data-"+this.name+"]").forEach((function(n,e){n.getBoundingClientRect();var i,o,s,r=n.dataset[t.name+"Class"]||t.class,l="string"==typeof n.dataset[t.name+"Id"]?n.dataset[t.name+"Id"]:e,a="string"==typeof n.dataset[t.name+"Offset"]?n.dataset[t.name+"Offset"].split(","):t.offset,c=n.dataset[t.name+"Repeat"],f=n.dataset[t.name+"Call"],A=n.dataset[t.name+"Target"],h=(s=void 0!==A?document.querySelector("".concat(A)):n).getBoundingClientRect();i=h.top+t.instance.scroll.y,o=h.left+t.instance.scroll.x;var d=i+s.offsetHeight,u=o+s.offsetWidth;c="false"!=c&&(null!=c||t.repeat);var m=t.getRelativeOffset(a),p={el:n,targetEl:s,id:l,class:r,top:i+=m[0],bottom:d-=m[1],left:o,right:u,offset:a,progress:0,repeat:c,inView:!1,call:f};t.els[l]=p,n.classList.contains(r)&&t.setInView(t.els[l],l)}))}},{key:"updateElements",value:function(){var t=this;Object.entries(this.els).forEach((function(n){var e=p(n,2),i=e[0],o=e[1],s=o.targetEl.getBoundingClientRect().top+t.instance.scroll.y,r=s+o.targetEl.offsetHeight,l=t.getRelativeOffset(o.offset);t.els[i].top=s+l[0],t.els[i].bottom=r-l[1]})),this.hasScrollTicking=!1}},{key:"getRelativeOffset",value:function(t){var n=[0,0];if(t)for(var e=0;e<t.length;e++)"string"==typeof t[e]?t[e].includes("%")?n[e]=parseInt(t[e].replace("%","")*this.windowHeight/100):n[e]=parseInt(t[e]):n[e]=t[e];return n}},{key:"scrollTo",value:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=parseInt(n.offset)||0,i=!!n.callback&&n.callback;if("string"==typeof t){if("top"===t)t=this.html;else if("bottom"===t)t=this.html.offsetHeight-window.innerHeight;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");e="number"!=typeof t?t.getBoundingClientRect().top+e+this.instance.scroll.y:t+e;var o=function(){return parseInt(window.pageYOffset)===parseInt(e)};if(i){if(o())return void i();var s=function t(){o()&&(window.removeEventListener("scroll",t),i())};window.addEventListener("scroll",s)}window.scrollTo({top:e,behavior:0===n.duration?"auto":"smooth"})}},{key:"update",value:function(){this.addElements(),this.detectElements()}},{key:"destroy",value:function(){m(f(e.prototype),"destroy",this).call(this),window.removeEventListener("scroll",this.checkScroll,!1)}}]),e}(w)),x=Object.getOwnPropertySymbols,T=Object.prototype.hasOwnProperty,I=Object.prototype.propertyIsEnumerable;function S(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}var D=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var n={},e=0;e<10;e++)n["_"+String.fromCharCode(e)]=e;if("0123456789"!==Object.getOwnPropertyNames(n).map((function(t){return n[t]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(t){i[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(t){return!1}}()?Object.assign:function(t,n){for(var e,i,o=S(t),s=1;s<arguments.length;s++){for(var r in e=Object(arguments[s]))T.call(e,r)&&(o[r]=e[r]);if(x){i=x(e);for(var l=0;l<i.length;l++)I.call(e,i[l])&&(o[i[l]]=e[i[l]])}}return o};function L(){}L.prototype={on:function(t,n,e){var i=this.e||(this.e={});return(i[t]||(i[t]=[])).push({fn:n,ctx:e}),this},once:function(t,n,e){var i=this;function o(){i.off(t,o),n.apply(e,arguments)}return o._=n,this.on(t,o,e)},emit:function(t){for(var n=[].slice.call(arguments,1),e=((this.e||(this.e={}))[t]||[]).slice(),i=0,o=e.length;i<o;i++)e[i].fn.apply(e[i].ctx,n);return this},off:function(t,n){var e=this.e||(this.e={}),i=e[t],o=[];if(i&&n)for(var s=0,r=i.length;s<r;s++)i[s].fn!==n&&i[s].fn._!==n&&o.push(i[s]);return o.length?e[t]=o:delete e[t],this}};var M=L,O=v((function(t,n){(function(){(null!==n?n:this).Lethargy=function(){function t(t,n,e,i){this.stability=null!=t?Math.abs(t):8,this.sensitivity=null!=n?1+Math.abs(n):100,this.tolerance=null!=e?1+Math.abs(e):1.1,this.delay=null!=i?i:150,this.lastUpDeltas=function(){var t,n,e;for(e=[],t=1,n=2*this.stability;1<=n?t<=n:t>=n;1<=n?t++:t--)e.push(null);return e}.call(this),this.lastDownDeltas=function(){var t,n,e;for(e=[],t=1,n=2*this.stability;1<=n?t<=n:t>=n;1<=n?t++:t--)e.push(null);return e}.call(this),this.deltasTimestamp=function(){var t,n,e;for(e=[],t=1,n=2*this.stability;1<=n?t<=n:t>=n;1<=n?t++:t--)e.push(null);return e}.call(this)}return t.prototype.check=function(t){var n;return null!=(t=t.originalEvent||t).wheelDelta?n=t.wheelDelta:null!=t.deltaY?n=-40*t.deltaY:null==t.detail&&0!==t.detail||(n=-40*t.detail),this.deltasTimestamp.push(Date.now()),this.deltasTimestamp.shift(),n>0?(this.lastUpDeltas.push(n),this.lastUpDeltas.shift(),this.isInertia(1)):(this.lastDownDeltas.push(n),this.lastDownDeltas.shift(),this.isInertia(-1))},t.prototype.isInertia=function(t){var n,e,i,o,s,r,l;return null===(n=-1===t?this.lastDownDeltas:this.lastUpDeltas)[0]?t:!(this.deltasTimestamp[2*this.stability-2]+this.delay>Date.now()&&n[0]===n[2*this.stability-1])&&(i=n.slice(0,this.stability),e=n.slice(this.stability,2*this.stability),l=i.reduce((function(t,n){return t+n})),s=e.reduce((function(t,n){return t+n})),r=l/i.length,o=s/e.length,Math.abs(r)<Math.abs(o*this.tolerance)&&this.sensitivity<Math.abs(o)&&t)},t.prototype.showLastUpDeltas=function(){return this.lastUpDeltas},t.prototype.showLastDownDeltas=function(){return this.lastDownDeltas},t}()}).call(b)})),R={hasWheelEvent:"onwheel"in document,hasMouseWheelEvent:"onmousewheel"in document,hasTouch:"ontouchstart"in window||window.TouchEvent||window.DocumentTouch&&document instanceof DocumentTouch,hasTouchWin:navigator.msMaxTouchPoints&&navigator.msMaxTouchPoints>1,hasPointer:!!window.navigator.msPointerEnabled,hasKeyDown:"onkeydown"in document,isFirefox:navigator.userAgent.indexOf("Firefox")>-1},j=Object.prototype.toString,G=Object.prototype.hasOwnProperty;function U(t,n){return function(){return t.apply(n,arguments)}}var q=O.Lethargy,W="virtualscroll",z=X,Y=37,F=38,_=39,H=40,P=32;function X(t){!function(t){if(!t)return console.warn("bindAll requires at least one argument.");var n=Array.prototype.slice.call(arguments,1);if(0===n.length)for(var e in t)G.call(t,e)&&"function"==typeof t[e]&&"[object Function]"==j.call(t[e])&&n.push(e);for(var i=0;i<n.length;i++){var o=n[i];t[o]=U(t[o],t)}}(this,"_onWheel","_onMouseWheel","_onTouchStart","_onTouchMove","_onKeyDown"),this.el=window,t&&t.el&&(this.el=t.el,delete t.el),this.options=D({mouseMultiplier:1,touchMultiplier:2,firefoxMultiplier:15,keyStep:120,preventTouch:!1,unpreventTouchClass:"vs-touchmove-allowed",limitInertia:!1,useKeyboard:!0,useTouch:!0},t),this.options.limitInertia&&(this._lethargy=new q),this._emitter=new M,this._event={y:0,x:0,deltaX:0,deltaY:0},this.touchStartX=null,this.touchStartY=null,this.bodyTouchAction=null,void 0!==this.options.passive&&(this.listenerOptions={passive:this.options.passive})}function V(t,n,e){return(1-e)*t+e*n}function K(t){var n={};if(window.getComputedStyle){var e=getComputedStyle(t),i=e.transform||e.webkitTransform||e.mozTransform,o=i.match(/^matrix3d\((.+)\)$/);return o?(n.x=o?parseFloat(o[1].split(", ")[12]):0,n.y=o?parseFloat(o[1].split(", ")[13]):0):(o=i.match(/^matrix\((.+)\)$/),n.x=o?parseFloat(o[1].split(", ")[4]):0,n.y=o?parseFloat(o[1].split(", ")[5]):0),n}}function N(t){for(var n=[];t&&t!==document;t=t.parentNode)n.push(t);return n}X.prototype._notify=function(t){var n=this._event;n.x+=n.deltaX,n.y+=n.deltaY,this._emitter.emit(W,{x:n.x,y:n.y,deltaX:n.deltaX,deltaY:n.deltaY,originalEvent:t})},X.prototype._onWheel=function(t){var n=this.options;if(!this._lethargy||!1!==this._lethargy.check(t)){var e=this._event;e.deltaX=t.wheelDeltaX||-1*t.deltaX,e.deltaY=t.wheelDeltaY||-1*t.deltaY,R.isFirefox&&1==t.deltaMode&&(e.deltaX*=n.firefoxMultiplier,e.deltaY*=n.firefoxMultiplier),e.deltaX*=n.mouseMultiplier,e.deltaY*=n.mouseMultiplier,this._notify(t)}},X.prototype._onMouseWheel=function(t){if(!this.options.limitInertia||!1!==this._lethargy.check(t)){var n=this._event;n.deltaX=t.wheelDeltaX?t.wheelDeltaX:0,n.deltaY=t.wheelDeltaY?t.wheelDeltaY:t.wheelDelta,this._notify(t)}},X.prototype._onTouchStart=function(t){var n=t.targetTouches?t.targetTouches[0]:t;this.touchStartX=n.pageX,this.touchStartY=n.pageY},X.prototype._onTouchMove=function(t){var n=this.options;n.preventTouch&&!t.target.classList.contains(n.unpreventTouchClass)&&t.preventDefault();var e=this._event,i=t.targetTouches?t.targetTouches[0]:t;e.deltaX=(i.pageX-this.touchStartX)*n.touchMultiplier,e.deltaY=(i.pageY-this.touchStartY)*n.touchMultiplier,this.touchStartX=i.pageX,this.touchStartY=i.pageY,this._notify(t)},X.prototype._onKeyDown=function(t){var n=this._event;n.deltaX=n.deltaY=0;var e=window.innerHeight-40;switch(t.keyCode){case Y:case F:n.deltaY=this.options.keyStep;break;case _:case H:n.deltaY=-this.options.keyStep;break;case t.shiftKey:n.deltaY=e;break;case P:n.deltaY=-e;break;default:return}this._notify(t)},X.prototype._bind=function(){R.hasWheelEvent&&this.el.addEventListener("wheel",this._onWheel,this.listenerOptions),R.hasMouseWheelEvent&&this.el.addEventListener("mousewheel",this._onMouseWheel,this.listenerOptions),R.hasTouch&&this.options.useTouch&&(this.el.addEventListener("touchstart",this._onTouchStart,this.listenerOptions),this.el.addEventListener("touchmove",this._onTouchMove,this.listenerOptions)),R.hasPointer&&R.hasTouchWin&&(this.bodyTouchAction=document.body.style.msTouchAction,document.body.style.msTouchAction="none",this.el.addEventListener("MSPointerDown",this._onTouchStart,!0),this.el.addEventListener("MSPointerMove",this._onTouchMove,!0)),R.hasKeyDown&&this.options.useKeyboard&&document.addEventListener("keydown",this._onKeyDown)},X.prototype._unbind=function(){R.hasWheelEvent&&this.el.removeEventListener("wheel",this._onWheel),R.hasMouseWheelEvent&&this.el.removeEventListener("mousewheel",this._onMouseWheel),R.hasTouch&&(this.el.removeEventListener("touchstart",this._onTouchStart),this.el.removeEventListener("touchmove",this._onTouchMove)),R.hasPointer&&R.hasTouchWin&&(document.body.style.msTouchAction=this.bodyTouchAction,this.el.removeEventListener("MSPointerDown",this._onTouchStart,!0),this.el.removeEventListener("MSPointerMove",this._onTouchMove,!0)),R.hasKeyDown&&this.options.useKeyboard&&document.removeEventListener("keydown",this._onKeyDown)},X.prototype.on=function(t,n){this._emitter.on(W,t,n);var e=this._emitter.e;e&&e[W]&&1===e[W].length&&this._bind()},X.prototype.off=function(t,n){this._emitter.off(W,t,n);var e=this._emitter.e;(!e[W]||e[W].length<=0)&&this._unbind()},X.prototype.reset=function(){var t=this._event;t.x=0,t.y=0},X.prototype.destroy=function(){this._emitter.off(),this._unbind()};var $=.1,Z="function"==typeof Float32Array;function Q(t,n){return 1-3*n+3*t}function J(t,n){return 3*n-6*t}function tt(t){return 3*t}function nt(t,n,e){return((Q(n,e)*t+J(n,e))*t+tt(n))*t}function et(t,n,e){return 3*Q(n,e)*t*t+2*J(n,e)*t+tt(n)}function it(t){return t}var ot=function(t,n,e,i){if(!(0<=t&&t<=1&&0<=e&&e<=1))throw new Error("bezier x values must be in [0, 1] range");if(t===n&&e===i)return it;for(var o=Z?new Float32Array(11):new Array(11),s=0;s<11;++s)o[s]=nt(s*$,t,e);function r(n){for(var i=0,s=1;10!==s&&o[s]<=n;++s)i+=$;--s;var r=i+(n-o[s])/(o[s+1]-o[s])*$,l=et(r,t,e);return l>=.001?function(t,n,e,i){for(var o=0;o<4;++o){var s=et(n,e,i);if(0===s)return n;n-=(nt(n,e,i)-t)/s}return n}(n,r,t,e):0===l?r:function(t,n,e,i,o){var s,r,l=0;do{(s=nt(r=n+(e-n)/2,i,o)-t)>0?e=r:n=r}while(Math.abs(s)>1e-7&&++l<10);return r}(n,i,i+$,t,e)}return function(t){return 0===t?0:1===t?1:nt(r(t),n,i)}},st=38,rt=40,lt=32,at=9,ct=33,ft=34,At=36,ht=35,dt=function(t){c(e,t);var n=u(e);function e(){var t,o=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return i(this,e),history.scrollRestoration&&(history.scrollRestoration="manual"),window.scrollTo(0,0),(t=n.call(this,o)).inertia&&(t.lerp=.1*t.inertia),t.isScrolling=!1,t.isDraggingScrollbar=!1,t.isTicking=!1,t.hasScrollTicking=!1,t.parallaxElements={},t.stop=!1,t.scrollbarContainer=o.scrollbarContainer,t.checkKey=t.checkKey.bind(h(t)),window.addEventListener("keydown",t.checkKey,!1),t}return s(e,[{key:"init",value:function(){var t=this;this.html.classList.add(this.smoothClass),this.html.setAttribute("data-".concat(this.name,"-direction"),this.direction),this.instance=a({delta:{x:this.initPosition.x,y:this.initPosition.y},scroll:{x:this.initPosition.x,y:this.initPosition.y}},this.instance),this.vs=new z({el:this.scrollFromAnywhere?document:this.el,mouseMultiplier:navigator.platform.indexOf("Win")>-1?1:.4,firefoxMultiplier:this.firefoxMultiplier,touchMultiplier:this.touchMultiplier,useKeyboard:!1,passive:!0}),this.vs.on((function(n){t.stop||t.isDraggingScrollbar||requestAnimationFrame((function(){t.updateDelta(n),t.isScrolling||t.startScrolling()}))})),this.setScrollLimit(),this.initScrollBar(),this.addSections(),this.addElements(),this.checkScroll(!0),this.transformElements(!0,!0),m(f(e.prototype),"init",this).call(this)}},{key:"setScrollLimit",value:function(){if(this.instance.limit.y=this.el.offsetHeight-this.windowHeight,"horizontal"===this.direction){for(var t=0,n=this.el.children,e=0;e<n.length;e++)t+=n[e].offsetWidth;this.instance.limit.x=t-this.windowWidth}}},{key:"startScrolling",value:function(){this.startScrollTs=Date.now(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}},{key:"stopScrolling",value:function(){cancelAnimationFrame(this.checkScrollRaf),this.startScrollTs=void 0,this.scrollToRaf&&(cancelAnimationFrame(this.scrollToRaf),this.scrollToRaf=null),this.isScrolling=!1,this.instance.scroll.y=Math.round(this.instance.scroll.y),this.html.classList.remove(this.scrollingClass)}},{key:"checkKey",value:function(t){var n=this;if(this.stop)t.keyCode==at&&requestAnimationFrame((function(){n.html.scrollTop=0,document.body.scrollTop=0,n.html.scrollLeft=0,document.body.scrollLeft=0}));else{switch(t.keyCode){case at:requestAnimationFrame((function(){n.html.scrollTop=0,document.body.scrollTop=0,n.html.scrollLeft=0,document.body.scrollLeft=0,n.scrollTo(document.activeElement,{offset:-window.innerHeight/2})}));break;case st:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]-=240);break;case rt:this.isActiveElementScrollSensitive()&&(this.instance.delta[this.directionAxis]+=240);break;case ct:this.instance.delta[this.directionAxis]-=window.innerHeight;break;case ft:this.instance.delta[this.directionAxis]+=window.innerHeight;break;case At:this.instance.delta[this.directionAxis]-=this.instance.limit[this.directionAxis];break;case ht:this.instance.delta[this.directionAxis]+=this.instance.limit[this.directionAxis];break;case lt:this.isActiveElementScrollSensitive()&&(t.shiftKey?this.instance.delta[this.directionAxis]-=window.innerHeight:this.instance.delta[this.directionAxis]+=window.innerHeight);break;default:return}this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis]),this.stopScrolling(),this.isScrolling=!0,this.checkScroll(),this.html.classList.add(this.scrollingClass)}}},{key:"isActiveElementScrollSensitive",value:function(){return!(document.activeElement instanceof HTMLInputElement||document.activeElement instanceof HTMLTextAreaElement||document.activeElement instanceof HTMLButtonElement||document.activeElement instanceof HTMLSelectElement)}},{key:"checkScroll",value:function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(n||this.isScrolling||this.isDraggingScrollbar){this.hasScrollTicking||(this.checkScrollRaf=requestAnimationFrame((function(){return t.checkScroll()})),this.hasScrollTicking=!0),this.updateScroll();var i=Math.abs(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis]),o=Date.now()-this.startScrollTs;if(!this.animatingScroll&&o>100&&(i<.5&&0!=this.instance.delta[this.directionAxis]||i<.5&&0==this.instance.delta[this.directionAxis])&&this.stopScrolling(),Object.entries(this.sections).forEach((function(e){var i=p(e,2),o=(i[0],i[1]);o.persistent||t.instance.scroll[t.directionAxis]>o.offset[t.directionAxis]&&t.instance.scroll[t.directionAxis]<o.limit[t.directionAxis]?("horizontal"===t.direction?t.transform(o.el,-t.instance.scroll[t.directionAxis],0):t.transform(o.el,0,-t.instance.scroll[t.directionAxis]),o.inView||(o.inView=!0,o.el.style.opacity=1,o.el.style.pointerEvents="all",o.el.setAttribute("data-".concat(t.name,"-section-inview"),""))):((o.inView||n)&&(o.inView=!1,o.el.style.opacity=0,o.el.style.pointerEvents="none",o.el.removeAttribute("data-".concat(t.name,"-section-inview"))),t.transform(o.el,0,0))})),this.getDirection&&this.addDirection(),this.getSpeed&&(this.addSpeed(),this.speedTs=Date.now()),this.detectElements(),this.transformElements(),this.hasScrollbar){var s=this.instance.scroll[this.directionAxis]/this.instance.limit[this.directionAxis]*this.scrollBarLimit[this.directionAxis];"horizontal"===this.direction?this.transform(this.scrollbarThumb,s,0):this.transform(this.scrollbarThumb,0,s)}m(f(e.prototype),"checkScroll",this).call(this),this.hasScrollTicking=!1}}},{key:"resize",value:function(){this.windowHeight=window.innerHeight,this.windowWidth=window.innerWidth,this.checkContext(),this.windowMiddle={x:this.windowWidth/2,y:this.windowHeight/2},this.update()}},{key:"updateDelta",value:function(t){var n,e=this[this.context]&&this[this.context].gestureDirection?this[this.context].gestureDirection:this.gestureDirection;n="both"===e?t.deltaX+t.deltaY:"vertical"===e?t.deltaY:"horizontal"===e?t.deltaX:t.deltaY,this.instance.delta[this.directionAxis]-=n*this.multiplier,this.instance.delta[this.directionAxis]<0&&(this.instance.delta[this.directionAxis]=0),this.instance.delta[this.directionAxis]>this.instance.limit[this.directionAxis]&&(this.instance.delta[this.directionAxis]=this.instance.limit[this.directionAxis])}},{key:"updateScroll",value:function(t){this.isScrolling||this.isDraggingScrollbar?this.instance.scroll[this.directionAxis]=V(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis],this.lerp):this.instance.scroll[this.directionAxis]>this.instance.limit[this.directionAxis]?this.setScroll(this.instance.scroll[this.directionAxis],this.instance.limit[this.directionAxis]):this.instance.scroll.y<0?this.setScroll(this.instance.scroll[this.directionAxis],0):this.setScroll(this.instance.scroll[this.directionAxis],this.instance.delta[this.directionAxis])}},{key:"addDirection",value:function(){this.instance.delta.y>this.instance.scroll.y?"down"!==this.instance.direction&&(this.instance.direction="down"):this.instance.delta.y<this.instance.scroll.y&&"up"!==this.instance.direction&&(this.instance.direction="up"),this.instance.delta.x>this.instance.scroll.x?"right"!==this.instance.direction&&(this.instance.direction="right"):this.instance.delta.x<this.instance.scroll.x&&"left"!==this.instance.direction&&(this.instance.direction="left")}},{key:"addSpeed",value:function(){this.instance.delta[this.directionAxis]!=this.instance.scroll[this.directionAxis]?this.instance.speed=(this.instance.delta[this.directionAxis]-this.instance.scroll[this.directionAxis])/Math.max(1,Date.now()-this.speedTs):this.instance.speed=0}},{key:"initScrollBar",value:function(){if(this.scrollbar=document.createElement("span"),this.scrollbarThumb=document.createElement("span"),this.scrollbar.classList.add("".concat(this.scrollbarClass)),this.scrollbarThumb.classList.add("".concat(this.scrollbarClass,"_thumb")),this.scrollbar.append(this.scrollbarThumb),this.scrollbarContainer?this.scrollbarContainer.append(this.scrollbar):document.body.append(this.scrollbar),this.getScrollBar=this.getScrollBar.bind(this),this.releaseScrollBar=this.releaseScrollBar.bind(this),this.moveScrollBar=this.moveScrollBar.bind(this),this.scrollbarThumb.addEventListener("mousedown",this.getScrollBar),window.addEventListener("mouseup",this.releaseScrollBar),window.addEventListener("mousemove",this.moveScrollBar),this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"reinitScrollBar",value:function(){if(this.hasScrollbar=!1,"horizontal"==this.direction){if(this.instance.limit.x+this.windowWidth<=this.windowWidth)return}else if(this.instance.limit.y+this.windowHeight<=this.windowHeight)return;this.hasScrollbar=!0,this.scrollbarBCR=this.scrollbar.getBoundingClientRect(),this.scrollbarHeight=this.scrollbarBCR.height,this.scrollbarWidth=this.scrollbarBCR.width,"horizontal"===this.direction?this.scrollbarThumb.style.width="".concat(this.scrollbarWidth*this.scrollbarWidth/(this.instance.limit.x+this.scrollbarWidth),"px"):this.scrollbarThumb.style.height="".concat(this.scrollbarHeight*this.scrollbarHeight/(this.instance.limit.y+this.scrollbarHeight),"px"),this.scrollbarThumbBCR=this.scrollbarThumb.getBoundingClientRect(),this.scrollBarLimit={x:this.scrollbarWidth-this.scrollbarThumbBCR.width,y:this.scrollbarHeight-this.scrollbarThumbBCR.height}}},{key:"destroyScrollBar",value:function(){this.scrollbarThumb.removeEventListener("mousedown",this.getScrollBar),window.removeEventListener("mouseup",this.releaseScrollBar),window.removeEventListener("mousemove",this.moveScrollBar),this.scrollbar.remove()}},{key:"getScrollBar",value:function(t){this.isDraggingScrollbar=!0,this.checkScroll(),this.html.classList.remove(this.scrollingClass),this.html.classList.add(this.draggingClass)}},{key:"releaseScrollBar",value:function(t){this.isDraggingScrollbar=!1,this.isScrolling&&this.html.classList.add(this.scrollingClass),this.html.classList.remove(this.draggingClass)}},{key:"moveScrollBar",value:function(t){var n=this;this.isDraggingScrollbar&&requestAnimationFrame((function(){var e=100*(t.clientX-n.scrollbarBCR.left)/n.scrollbarWidth*n.instance.limit.x/100,i=100*(t.clientY-n.scrollbarBCR.top)/n.scrollbarHeight*n.instance.limit.y/100;i>0&&i<n.instance.limit.y&&(n.instance.delta.y=i),e>0&&e<n.instance.limit.x&&(n.instance.delta.x=e)}))}},{key:"addElements",value:function(){var t=this;this.els={},this.parallaxElements={},this.el.querySelectorAll("[data-".concat(this.name,"]")).forEach((function(n,e){var i,o,s,r=N(n),l=Object.entries(t.sections).map((function(t){var n=p(t,2);n[0];return n[1]})).find((function(t){return r.includes(t.el)})),a=n.dataset[t.name+"Class"]||t.class,c="string"==typeof n.dataset[t.name+"Id"]?n.dataset[t.name+"Id"]:"el"+e,f=n.dataset[t.name+"Repeat"],A=n.dataset[t.name+"Call"],h=n.dataset[t.name+"Position"],d=n.dataset[t.name+"Delay"],u=n.dataset[t.name+"Direction"],m="string"==typeof n.dataset[t.name+"Sticky"],C=!!n.dataset[t.name+"Speed"]&&parseFloat(n.dataset[t.name+"Speed"])/10,B="string"==typeof n.dataset[t.name+"Offset"]?n.dataset[t.name+"Offset"].split(","):t.offset,g=n.dataset[t.name+"Target"],y=(s=void 0!==g?document.querySelector("".concat(g)):n).getBoundingClientRect();null===l||l.inView?(i=y.top+t.instance.scroll.y-K(s).y,o=y.left+t.instance.scroll.x-K(s).x):(i=y.top-K(l.el).y-K(s).y,o=y.left-K(l.el).x-K(s).x);var w=i+s.offsetHeight,b=o+s.offsetWidth,v={x:(b-o)/2+o,y:(w-i)/2+i};if(m){var k=n.getBoundingClientRect(),E=k.top,x=k.left,T={x:x-o,y:E-i};i+=window.innerHeight,o+=window.innerWidth,w=E+s.offsetHeight-n.offsetHeight-T[t.directionAxis],v={x:((b=x+s.offsetWidth-n.offsetWidth-T[t.directionAxis])-o)/2+o,y:(w-i)/2+i}}f="false"!=f&&(null!=f||t.repeat);var I=[0,0];if(B)if("horizontal"===t.direction){for(var S=0;S<B.length;S++)"string"==typeof B[S]?B[S].includes("%")?I[S]=parseInt(B[S].replace("%","")*t.windowWidth/100):I[S]=parseInt(B[S]):I[S]=B[S];o+=I[0],b-=I[1]}else{for(S=0;S<B.length;S++)"string"==typeof B[S]?B[S].includes("%")?I[S]=parseInt(B[S].replace("%","")*t.windowHeight/100):I[S]=parseInt(B[S]):I[S]=B[S];i+=I[0],w-=I[1]}var D={el:n,id:c,class:a,section:l,top:i,middle:v,bottom:w,left:o,right:b,offset:B,progress:0,repeat:f,inView:!1,call:A,speed:C,delay:d,position:h,target:s,direction:u,sticky:m};t.els[c]=D,n.classList.contains(a)&&t.setInView(t.els[c],c),(!1!==C||m)&&(t.parallaxElements[c]=D)}))}},{key:"addSections",value:function(){var t=this;this.sections={};var n=this.el.querySelectorAll("[data-".concat(this.name,"-section]"));0===n.length&&(n=[this.el]),n.forEach((function(n,e){var i="string"==typeof n.dataset[t.name+"Id"]?n.dataset[t.name+"Id"]:"section"+e,o=n.getBoundingClientRect(),s={x:o.left-1.5*window.innerWidth-K(n).x,y:o.top-1.5*window.innerHeight-K(n).y},r={x:s.x+o.width+2*window.innerWidth,y:s.y+o.height+2*window.innerHeight},l="string"==typeof n.dataset[t.name+"Persistent"];n.setAttribute("data-scroll-section-id",i);var a={el:n,offset:s,limit:r,inView:!1,persistent:l,id:i};t.sections[i]=a}))}},{key:"transform",value:function(t,n,e,i){var o;if(i){var s=K(t),r=V(s.x,n,i),l=V(s.y,e,i);o="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(r,",").concat(l,",0,1)")}else o="matrix3d(1,0,0.00,0,0.00,1,0.00,0,0,0,1,0,".concat(n,",").concat(e,",0,1)");t.style.webkitTransform=o,t.style.msTransform=o,t.style.transform=o}},{key:"transformElements",value:function(t){var n=this,e=arguments.length>1&&void 0!==arguments[1]&&arguments[1],i=this.instance.scroll.x+this.windowWidth,o=this.instance.scroll.y+this.windowHeight,s={x:this.instance.scroll.x+this.windowMiddle.x,y:this.instance.scroll.y+this.windowMiddle.y};Object.entries(this.parallaxElements).forEach((function(r){var l=p(r,2),a=(l[0],l[1]),c=!1;if(t&&(c=0),a.inView||e)switch(a.position){case"top":case"left":c=n.instance.scroll[n.directionAxis]*-a.speed;break;case"elementTop":c=(o-a.top)*-a.speed;break;case"bottom":c=(n.instance.limit[n.directionAxis]-o+n.windowHeight)*a.speed;break;case"elementLeft":c=(i-a.left)*-a.speed;break;case"right":c=(n.instance.limit[n.directionAxis]-i+n.windowHeight)*a.speed;break;default:c=(s[n.directionAxis]-a.middle[n.directionAxis])*-a.speed}a.sticky&&(c=a.inView?"horizontal"===n.direction?n.instance.scroll.x-a.left+window.innerWidth:n.instance.scroll.y-a.top+window.innerHeight:"horizontal"===n.direction?n.instance.scroll.x<a.left-window.innerWidth&&n.instance.scroll.x<a.left-window.innerWidth/2?0:n.instance.scroll.x>a.right&&n.instance.scroll.x>a.right+100&&a.right-a.left+window.innerWidth:n.instance.scroll.y<a.top-window.innerHeight&&n.instance.scroll.y<a.top-window.innerHeight/2?0:n.instance.scroll.y>a.bottom&&n.instance.scroll.y>a.bottom+100&&a.bottom-a.top+window.innerHeight),!1!==c&&("horizontal"===a.direction||"horizontal"===n.direction&&"vertical"!==a.direction?n.transform(a.el,c,0,!t&&a.delay):n.transform(a.el,0,c,!t&&a.delay))}))}},{key:"scrollTo",value:function(t){var n=this,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=parseInt(e.offset)||0,o=isNaN(parseInt(e.duration))?1e3:parseInt(e.duration),s=e.easing||[.25,0,.35,1],r=!!e.disableLerp,l=!!e.callback&&e.callback;if(s=ot.apply(void 0,C(s)),"string"==typeof t){if("top"===t)t=0;else if("bottom"===t)t=this.instance.limit.y;else if("left"===t)t=0;else if("right"===t)t=this.instance.limit.x;else if(!(t=document.querySelector(t)))return}else if("number"==typeof t)t=parseInt(t);else if(!t||!t.tagName)return void console.warn("`target` parameter is not valid");if("number"!=typeof t){var a=N(t).includes(this.el);if(!a)return;var c=t.getBoundingClientRect(),f=c.top,A=c.left,h=N(t),d=h.find((function(t){return Object.entries(n.sections).map((function(t){var n=p(t,2);n[0];return n[1]})).find((function(n){return n.el==t}))})),u=0;u=d?K(d)[this.directionAxis]:-this.instance.scroll[this.directionAxis],i="horizontal"===this.direction?A+i-u:f+i-u}else i=t+i;var m=parseFloat(this.instance.delta[this.directionAxis]),B=Math.max(0,Math.min(i,this.instance.limit[this.directionAxis])),g=B-m,y=function(t){r?"horizontal"===n.direction?n.setScroll(m+g*t,n.instance.delta.y):n.setScroll(n.instance.delta.x,m+g*t):n.instance.delta[n.directionAxis]=m+g*t};this.animatingScroll=!0,this.stopScrolling(),this.startScrolling();var w=Date.now(),b=function t(){var e=(Date.now()-w)/o;e>1?(y(1),n.animatingScroll=!1,0==o&&n.update(),l&&l()):(n.scrollToRaf=requestAnimationFrame(t),y(s(e)))};b()}},{key:"update",value:function(){this.setScrollLimit(),this.addSections(),this.addElements(),this.detectElements(),this.updateScroll(),this.transformElements(!0),this.reinitScrollBar(),this.checkScroll(!0)}},{key:"startScroll",value:function(){this.stop=!1}},{key:"stopScroll",value:function(){this.stop=!0}},{key:"setScroll",value:function(t,n){this.instance=a(a({},this.instance),{},{scroll:{x:t,y:n},delta:{x:t,y:n},speed:0})}},{key:"destroy",value:function(){m(f(e.prototype),"destroy",this).call(this),this.stopScrolling(),this.html.classList.remove(this.smoothClass),this.vs.destroy(),this.destroyScrollBar(),window.removeEventListener("keydown",this.checkKey,!1)}}]),e}(w),ut=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};i(this,t),this.options=n,Object.assign(this,y,n),this.smartphone=y.smartphone,n.smartphone&&Object.assign(this.smartphone,n.smartphone),this.tablet=y.tablet,n.tablet&&Object.assign(this.tablet,n.tablet),this.smooth||"horizontal"!=this.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible"),this.tablet.smooth||"horizontal"!=this.tablet.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (tablet)"),this.smartphone.smooth||"horizontal"!=this.smartphone.direction||console.warn("🚨 `smooth:false` & `horizontal` direction are not yet compatible (smartphone)"),this.init()}return s(t,[{key:"init",value:function(){if(this.options.isMobile=/Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)||"MacIntel"===navigator.platform&&navigator.maxTouchPoints>1||window.innerWidth<this.tablet.breakpoint,this.options.isTablet=this.options.isMobile&&window.innerWidth>=this.tablet.breakpoint,this.smooth&&!this.options.isMobile||this.tablet.smooth&&this.options.isTablet||this.smartphone.smooth&&this.options.isMobile&&!this.options.isTablet?this.scroll=new dt(this.options):this.scroll=new E(this.options),this.scroll.init(),window.location.hash){var t=window.location.hash.slice(1,window.location.hash.length),n=document.getElementById(t);n&&this.scroll.scrollTo(n)}}},{key:"update",value:function(){this.scroll.update()}},{key:"start",value:function(){this.scroll.startScroll()}},{key:"stop",value:function(){this.scroll.stopScroll()}},{key:"scrollTo",value:function(t,n){this.scroll.scrollTo(t,n)}},{key:"setScroll",value:function(t,n){this.scroll.setScroll(t,n)}},{key:"on",value:function(t,n){this.scroll.setEvents(t,n)}},{key:"off",value:function(t,n){this.scroll.unsetEvents(t,n)}},{key:"destroy",value:function(){this.scroll.destroy()}}]),t}(),mt=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};i(this,t),this.options=n,Object.assign(this,y,n),this.smartphone=y.smartphone,n.smartphone&&Object.assign(this.smartphone,n.smartphone),this.tablet=y.tablet,n.tablet&&Object.assign(this.tablet,n.tablet),this.init()}return s(t,[{key:"init",value:function(){if(this.scroll=new E(this.options),this.scroll.init(),window.location.hash){var t=window.location.hash.slice(1,window.location.hash.length),n=document.getElementById(t);n&&this.scroll.scrollTo(n)}}},{key:"update",value:function(){this.scroll.update()}},{key:"start",value:function(){this.scroll.startScroll()}},{key:"stop",value:function(){this.scroll.stopScroll()}},{key:"scrollTo",value:function(t,n){this.scroll.scrollTo(t,n)}},{key:"setScroll",value:function(t,n){this.scroll.setScroll(t,n)}},{key:"on",value:function(t,n){this.scroll.setEvents(t,n)}},{key:"off",value:function(t,n){this.scroll.unsetEvents(t,n)}},{key:"destroy",value:function(){this.scroll.destroy()}}]),t}();const pt=ut}],n={};function e(i){var o=n[i];if(void 0!==o)return o.exports;var s=n[i]={id:i,exports:{}};return t[i](s,s.exports,e),s.exports}e.m=t,e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),e.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var i=n.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})(),e.b=document.baseURI||self.location.href,e.nc=void 0;var i={};(()=>{e.r(i);e(1);var t=e(47);new(e(49).default)({el:document.querySelector("[data-scroll-container]"),smooth:!0});(new t.default).start()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,